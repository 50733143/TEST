<h1>簡介</h1>
<p>CMSimfly (<a href="https://github.com/chiamingyen/cmsimfly">https://github.com/chiamingyen/cmsimfly)</a> 是一套簡單的網際內容管理系統, 採用 Flask 網際框架, 以 Beautifulsoup 解讀分頁內容.</p>
<p><img alt="" height="471" src="/images/gocycle4.png" width="587"/></p>
<p></p>
<h2>目錄結構</h2>
<p>CMSimfly 的動態系統採用 Python3 + Flask 建構, 並且利用 Beatifulsoup 解讀位於 contig 目錄中的 content.htm 超文件檔案.</p>
<p>content.htm 檔案可以透過動態系統中的 generate_pages 功能, 將超文件轉為位於 content 目錄中的個別頁面檔案.</p>
<p>動態系統與靜態系統則共用 downloads, images, static 等目錄, 其中 downloads 目錄存放在動態系統上傳的文件檔, 而 images 目錄則存放動態系統所上傳的影像檔案, 包括 jpg, png 與 gif 等格式圖檔.</p>
<p>static 目錄則存放在動態與靜態系統所需要的 Javascript 或 Brython 程式檔.</p>
<h2>頁面編輯</h2>
<p>CMSimfly 動態系統的網際編輯器採用 <a href="https://www.tiny.cloud/">TinyMCE4</a>, 可以放入一般超文件,  納入圖檔, 嵌入影片連結, 並且加入帶有行數的原始碼.</p>
<p>透過 File Upload 功能, 可以一次上傳多個檔案,  存入 downloads 目錄中儲存, 之後各頁面可以引入對應連結.</p>
<p>而圖檔的上傳與引用與一般檔案類似, 但上傳後存入 images 目錄中.</p>
<h3>插入程式碼</h3>
<p>CMSimfly 目前使用 Syntaxhighlighter 3.0.83:</p>
<p> <a href="http://alexgorbatchev.com/SyntaxHighlighter/">http://alexgorbatchev.com/SyntaxHighlighter/</a> </p>
<p>進行頁面中的程式碼高亮顯示.</p>
<h4>Java 程式碼</h4>
<pre class="brush:java;auto-links:false;toolbar:false" contenteditable="false">import java.util.Scanner;

public class Life {
    public static void show(boolean[][] grid){
        String s = "";
        for(boolean[] row : grid){
            for(boolean val : row)
                if(val)
                    s += "*";
                else
                    s += ".";
            s += "\n";
        }
        System.out.println(s);
    }
    
    public static boolean[][] gen(){
        boolean[][] grid = new boolean[10][10];
        for(int r = 0; r &lt; 10; r++)
            for(int c = 0; c &lt; 10; c++)
                if( Math.random() &gt; 0.7 )
                    grid[r][c] = true;
        return grid;
    }
    
    public static void main(String[] args){
        boolean[][] world = gen();
        show(world);
        System.out.println();
        world = nextGen(world);
        show(world);
        Scanner s = new Scanner(System.in);
        while(s.nextLine().length() == 0){
            System.out.println();
            world = nextGen(world);
            show(world);
            
        }
    }
    
    public static boolean[][] nextGen(boolean[][] world){
        boolean[][] newWorld 
            = new boolean[world.length][world[0].length];
        int num;
        for(int r = 0; r &lt; world.length; r++){
            for(int c = 0; c &lt; world[0].length; c++){
                num = numNeighbors(world, r, c);
                if( occupiedNext(num, world[r][c]) )
                    newWorld[r][c] = true;
            }
        }
        return newWorld;
    }
    
    public static boolean occupiedNext(int numNeighbors, boolean occupied){
        if( occupied &amp;&amp; (numNeighbors == 2 || numNeighbors == 3))
            return true;
        else if (!occupied &amp;&amp; numNeighbors == 3)
            return true;
        else
            return false;
    }

    private static int numNeighbors(boolean[][] world, int row, int col) {
        int num = world[row][col] ? -1 : 0;
        for(int r = row - 1; r &lt;= row + 1; r++)
            for(int c = col - 1; c &lt;= col + 1; c++)
                if( inbounds(world, r, c) &amp;&amp; world[r][c] )
                    num++;

        return num;
    }

    private static boolean inbounds(boolean[][] world, int r, int c) {
        return r &gt;= 0 &amp;&amp; r &lt; world.length &amp;&amp; c &gt;= 0 &amp;&amp;
        c &lt; world[0].length;
    }

}</pre>
<p></p>
<h4>Python 程式碼</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def parse_content():
    """use bs4 and re module functions to parse content.htm"""
    #from pybean import Store, SQLiteWriter
    # if no content.db, create database file with cms table
    '''
    if not os.path.isfile(config_dir+"content.db"):
        library = Store(SQLiteWriter(config_dir+"content.db", frozen=False))
        cms = library.new("cms")
        cms.follow = 0
        cms.title = "head 1"
        cms.content = "content 1"
        cms.memo = "first memo"
        library.save(cms)
        library.commit()
    '''
    # if no content.htm, generate a head 1 and content 1 file
    if not os.path.isfile(config_dir+"content.htm"):
        # create content.htm if there is no content.htm
        File = open(config_dir + "content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
    subject = file_get_contents(config_dir+"content.htm")
    # deal with content without content
    if subject == "":
        # create content.htm if there is no content.htm
        File = open(config_dir + "content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
        subject = "&lt;h1&gt;head 1&lt;/h1&gt;content 1"
    # initialize the return lists
    head_list = []
    level_list = []
    page_list = []
    # make the soup out of the html content
    soup = bs4.BeautifulSoup(subject, 'html.parser')
    # 嘗試解讀各種情況下的標題
    soup = _remove_h123_attrs(soup)
    # 改寫 content.htm 後重新取 subject
    with open(config_dir + "content.htm", "wb") as f:
        f.write(soup.encode("utf-8"))
    subject = file_get_contents(config_dir+"content.htm")
    # get all h1, h2, h3 tags into list
    htag= soup.find_all(['h1', 'h2', 'h3'])
    n = len(htag)
    # get the page content to split subject using each h tag
    temp_data = subject.split(str(htag[0]))
    if len(temp_data) &gt; 2:
        subject = str(htag[0]).join(temp_data[1:])
    else:
        subject = temp_data[1]
    if n &gt;1:
            # i from 1 to i-1
            for i in range(1, len(htag)):
                head_list.append(htag[i-1].text.strip())
                # use name attribute of h* tag to get h1, h2 or h3
                # the number of h1, h2 or h3 is the level of page menu
                level_list.append(htag[i-1].name[1])
                temp_data = subject.split(str(htag[i]))
                if len(temp_data) &gt; 2:
                    subject = str(htag[i]).join(temp_data[1:])
                else:
                    subject = temp_data[1]
                # cut the other page content out of htag from 1 to i-1
                cut = temp_data[0]
                # add the page content
                page_list.append(cut)
    # last i
    # add the last page title
    head_list.append(htag[n-1].text.strip())
    # add the last level
    level_list.append(htag[n-1].name[1])
    temp_data = subject.split(str(htag[n-1]))
    # the last subject
    subject = temp_data[0]
    # cut the last page content out
    cut = temp_data[0]
    # the last page content
    page_list.append(cut)
    return head_list, level_list, page_list

</pre>
<p></p>
<h4>C或C++程式碼</h4>
<p>請注意, 目前 CMSimfly 標題內文無法解讀 "/" 符號, 因此若本頁面的標題為  "C/C++程式碼", 則無法進行分頁.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Runge Kutta for a set of first order differential equations */
 
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
 
#define N 2 /* number of first order equations */
#define dist 0.1 /* stepsize in t*/
#define MAX 30.0 /* max for t */
 
FILE *output; /* internal filename */
FILE *output1; /* internal filename */
// 利用 pipe 呼叫 gnuplot 繪圖
FILE *pipe;
 
void runge4(double x, double y[], double step); /* Runge-Kutta function */
double f(double x, double y[], int i); /* function for derivatives */
 
void main(){
 
  double t, y[N];
  int j;
 
  output=fopen("osc.dat", "w"); /* external filename */
  output1=fopen("osc1.dat", "w"); /* external filename */
 
  y[0]=1.0; /* initial position */
  y[1]=0.0; /* initial velocity */
 
  //fprintf(output, "0\t%f\n", y[0]);
 
  for (j=1; j*dist&lt;=MAX ;j++) /* time loop */{
 
    t=j*dist;
    runge4(t, y, dist);
    fprintf(output, "%f\t%f\n", t, y[0]);
    fprintf(output1, "%f\t%f\n", t, y[1]);
  }
 
  fclose(output);
  fclose(output1);
 
  pipe = popen("gnuplot -persist","w");
  //fprintf(pipe,"set term png enhanced font \"v:/fireflysung.ttf\" 18 \n");
  fprintf(pipe,"set term png enhanced font \"y:/wqy-microhei.ttc\" 18 \n");
  //fprintf(pipe,"set yrange [68:70]\n");
  fprintf(pipe,"set output \"test.png\"\n");
  fprintf(pipe, "plot \"osc.dat\" title \"位移\" with lines, \"osc1.dat\" title \"速度\" with lines\n");
  fprintf(pipe,"quit\n");

  fprintf(pipe,"quit\n");
  pclose(pipe);
}
 
void runge4(double x, double y[], double step){
 
  double h=step/2.0, /* the midpoint */
  t1[N], t2[N], t3[N], /* temporary storage arrays */
  k1[N], k2[N], k3[N],k4[N]; /* for Runge-Kutta */
  int i;
 
  for (i=0;i&lt;N;i++){
 
    t1[i]=y[i]+0.5*(k1[i]=step*f(x,y,i));
  }
 
  for (i=0;i&lt;N;i++){
 
    t2[i]=y[i]+0.5*(k2[i]=step*f(x+h, t1, i));
  }
 
  for (i=0;i&lt;N;i++){
 
    t3[i]=y[i]+ (k3[i]=step*f(x+h, t2, i));
  }
 
  for (i=0;i&lt;N;i++){
 
    k4[i]= step*f(x+step, t3, i);
  }
 
  for (i=0;i&lt;N;i++){
 
    y[i]+=(k1[i]+2*k2[i]+2*k3[i]+k4[i])/6.0;
  }
}
 
double f(double x, double y[], int i){
 
  if (i==0)
    x=y[1]; /* derivative of first equation */
  if (i==1)
    x=-y[0]-0.5*y[1];
  return x;
}</pre>
<p></p>
<h3>Lua 程式碼</h3>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">-- 導入 js 模組
js = require("js")
-- 取得 window
window = js.global
-- 猜小於或等於 n 的整數
big = 100
-- 計算猜測次數, 配合 while 至少會猜一次
num = 1
-- 利用 window:prompt 方法回應取得使用者所猜的整數
guess = window:prompt("請猜一個介於 1 到 "..big.." 的整數")
-- 利用數學模組的 random 函數以亂數產生答案
answer = math.random(big)
output = ""
-- 若沒猜對, 一直猜到對為止
while answer ~= tonumber(guess) do
    if answer &gt; tonumber(guess) then
        output = "猜第 "..num.." 次, guess="..guess..", answer="..answer.." - too small"
        print(output)
    else
        output = "猜第 "..num.." 次, guess="..guess..", answer="..answer.." - too big"
        print(output)
    end 
    guess = window:prompt(output..", 請猜一個介於 1 到 "..big.." 的整數")
    num = num + 1
end
print("總共猜了 "..num.." 次, answer=guess="..answer.." - correct")
    </pre>
<p></p>
<h3>Javascript 程式碼</h3>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">STLViewer = function(stlpath, plotarea) {

	var mycanvas = document.getElementById(plotarea);
	var viewer = new JSC3D.Viewer(mycanvas)
	var theScene = new JSC3D.Scene;
	////Initialize with a default file:
	//var stlpath = "../../../assets/2013-10-23/stl/box.STL"
	//var stlpath = "../../../assets/2013-10-23/stl/taj.stl"
	viewer.setParameter('SceneUrl', stlpath);
    viewer.setParameter('InitRotationX', 20);
	viewer.setParameter('InitRotationY', 20);
	viewer.setParameter('InitRotationZ', 0);
	viewer.setParameter('ModelColor', '#CAA618');
	viewer.setParameter('BackgroundColor1', '#FFFFFF');
	viewer.setParameter('BackgroundColor2', '#383840');
	viewer.init();
	viewer.update();
	////init done
	var canvas_drop = document.getElementById('canvas-drop')
	/*var dropzone = document.getElementById('dropzone')
	dropzone.addEventListener('dragover', handleDragOver, false);
	dropzone.addEventListener('drop', handleFileSelect, false); */
	canvas_drop.addEventListener('dragover', handleDragOver, false);
	canvas_drop.addEventListener('drop', handleFileSelect, false);

////Drag and drop logic:
	function handleFileSelect(evt) {
	    evt.stopPropagation();
	    evt.preventDefault();
	    var files = evt.dataTransfer.files;
	    console.log(evt)
	    console.log(files)
	    preview_stl(files[0])
	  }

	  function handleDragOver(evt) {
	    evt.stopPropagation();
	    evt.preventDefault();
	    evt.dataTransfer.dropEffect = 'copy';
	  }

////jsc3d logic
	var handle_file_select = function(e) {
		e.stopPropagation()
		e.preventDefault()
		var f = e.target.files[0]
		preview_stl(f)
	}

	function preview_stl(f) {
		var reader = new FileReader()
		var ext = f.name.split(".")[1]

		function setup_viewer() {
			viewer.setParameter('InitRotationX', 20);
			viewer.setParameter('InitRotationY', 20);
			viewer.setParameter('InitRotationZ', 0);
			viewer.setParameter('ModelColor', '#CAA618');
			viewer.setParameter('BackgroundColor1', '#FFFFFF');
			viewer.setParameter('BackgroundColor2', '#383840');
			viewer.setParameter('RenderMode', "flat");
		}
		setup_viewer()

		reader.onload = (function(file) {
			return function(e) {
				theScene = new JSC3D.Scene
		    	stl_loader = new JSC3D.StlLoader()
		    	stl_loader.parseStl(theScene, e.target.result)
		      	//viewer.init()
		      	viewer.replaceScene(theScene)
		      	viewer.update()
		      	console.log("file reader onload")
			}
		})(f)

		if (ext.toLowerCase() != "stl") {
			alert("That doesn't appear to be an STL file.");
		} else {
			reader.readAsBinaryString(f)
		}
	}
}
</pre>
<p></p>
<h4>Html 原始碼</h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;html&gt;
   &lt;head&gt;
      &lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
      &lt;title&gt;CMSimfly&lt;/title&gt;
      &lt;link rel="stylesheet" type="text/css" href="/static/cmsimply.css"&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;div class='container'&gt;
      &lt;nav&gt;
         &lt;ul id='css3menu1' class='topmenu'&gt;
            &lt;li&gt;&lt;a href='/get_page/簡介'&gt;簡介&lt;/a&gt;
            &lt;li&gt;&lt;a href='/get_page/目錄結構'&gt;目錄結構&lt;/a&gt;
            &lt;li&gt;
               &lt;a href='/get_page/頁面編輯'&gt;頁面編輯&lt;/a&gt;
               &lt;ul&gt;
                  &lt;li&gt;
                     &lt;a href='/get_page/插入程式碼'&gt;插入程式碼&lt;/a&gt;
                     &lt;ul&gt;
                        &lt;li&gt;&lt;a href='/get_page/Java 程式碼'&gt;Java 程式碼&lt;/a&gt;
                        &lt;li&gt;&lt;a href='/get_page/Python 程式碼'&gt;Python 程式碼&lt;/a&gt;
                        &lt;li&gt;&lt;a href='/get_page/C或C++程式碼'&gt;C或C++程式碼&lt;/a&gt;
                        &lt;li&gt;&lt;a href='/get_page/Lua 程式碼'&gt;Lua 程式碼&lt;/a&gt;
                        &lt;li&gt;&lt;a href='/get_page/Javascript 程式碼'&gt;Javascript 程式碼&lt;/a&gt;
                        &lt;li&gt;&lt;a href='/get_page/Html 原始碼'&gt;Html 原始碼&lt;/a&gt;&lt;/li&gt;
                        &lt;/li&gt;
                     &lt;/ul&gt;
               &lt;/ul&gt;
            &lt;li&gt;&lt;a href='/get_page/網際簡報'&gt;網際簡報&lt;/a&gt;
            &lt;li&gt;&lt;a href='/get_page/網誌編輯'&gt;網誌編輯&lt;/a&gt;
            &lt;li&gt;&lt;a href='/get_page/已知錯誤'&gt;已知錯誤&lt;/a&gt;&lt;/li&gt;
         &lt;/ul&gt;
      &lt;/nav&gt;
      &lt;section&gt;
         &lt;form method='post' action='/ssavePage'&gt;
         &lt;textarea class='simply-editor' name='page_content' cols='50' rows='15'&gt;&lt;h3&gt;Html 原始碼&lt;/h3&gt;&lt;/textarea&gt;
         &lt;input type='hidden' name='page_order' value='9'&gt;
         &lt;input type='submit' value='save'&gt;
         &lt;input type=button onClick="location.href='/get_page/Html 原始碼'" value='viewpage'&gt;
         &lt;/form&gt;
      &lt;/section&gt;
   &lt;/body&gt;
&lt;/html&gt;
COPY TO CLIPBOARD	</pre>
<p></p>
<h2>網際簡報</h2>
<p>CMSimfly 中採用 <a href="https://revealjs.com/#/">Reveal.js</a> 作為網際簡報, 其中的維護檔案位於 config/reveal.js, 而對應的簡報檔案則位於 reveal 目錄中.</p>
<h2>網誌編輯</h2>
<p>CMSimfly 彩用 <a href="https://blog.getpelican.com/">Pelican blog</a> 系統, 編輯檔案位於 config/pelican.leo, 對應的</p>
<p> Markdown 原始檔案位於 markdown 目錄中, 而經 Pelican 轉換出的網誌超文件檔案則位於 blog 目錄中.</p>
<p>其餘在網誌文章中所需要的 Javascript 或 Brython 程式檔案, 則與 CMSimfly 及 Reveal.js 共用, 位於 static 目錄下.</p>
<p>上傳檔案與圖檔的引用則與 CMSimfly 架構相同.</p>
<h2>已知錯誤</h2>
<h4>全部頁面會因無法正確解讀而誤刪</h4>
<p>在特定情況下, 系統會誤刪 config/content.htm 檔案, 目前在單頁或全部頁面編輯存檔之前, 或將上一版本的 content.htm 存入 content_back.htm, 若 content.htm 內容被程式誤刪, 可以利用備份檔案複製回原始內容後, 再進行後續處理.</p>
<h4>頁面標題不支援特殊符號</h4>
<p>各頁面標題目前不支援特殊符號, 例如: "/", "?" 等, 若已經發生程式無法解讀頁面的情況, 只能從編輯 config/content.htm 下手, 若系統位於遠端, 則後續必須要再設法提供一個額外的編輯 config/content.htm 檔案的網際連結功能.</p>
<h4>Video 引用不支援內部引用</h4>
<p>tinymce 中插入 video 的小視窗, 要移除引用的圖像與連結, 因為一般建議不要在內容中存入 .mp4 的影片資料, 而只接受引入影片 URL 連結.</p>
<h1>近端配置與管理</h1>
<h2>網路連線設定</h2>
<p>當不能上網時請先確認IP的取得是自動的</p>
<p>因為教室的IP分配是DHCP server分配的所以要設為自動</p>
<p><img alt="" height="400" src="/images/IP設定.png" width="357"/></p>
<p>再來確定瀏覽器的Proxy設定正確</p>
<p>每次上課能用proxy可能都不一樣  視當天狀況更動</p>
<p>有時可能因為proxy效能不佳   所以反而不設定proxy會更快</p>
<p>請依實際狀況決定是否要設定</p>
<p>點擊進階即可進入例外IP設定</p>
<p><img alt="" height="400" src="/images/proxy設定.png" width="319"/></p>
<p>再來要設定例外IP  不設定的話電腦會連到proxy去找這些近端IP</p>
<p><img alt="" height="400" src="/images/proxy例外.png" width="319"/></p>
<p>這樣會導致無法連線到自己的動態網頁進行編輯</p>
<p>使用Proxy的原因是不使用的話每台電腦連到同樣的網站都是一次流量</p>
<p>教室這麼多台電腦會造成許多不必要的連線</p>
<p>設置Proxy後只要有一台電腦連線過後</p>
<p>Proxy主機就會存有快取資料</p>
<p>之後再連到同樣的網站</p>
<p>就不用再連出去只要跟近端Proxy主機要資料就好</p>
<p>而且近端取得資料較為快速</p>
<p>也不會造成額外不必要的對外連線</p>
<p>適合在區網下有大量電腦使用</p>
<p>非以上情況  可能會因為Proxy主機效能不佳造成連線緩慢</p>
<p><strong>Proxy常見例外IP</strong></p>
<ul style="list-style-type: square;">
<li>192.168.*</li>
<li>127.0.0.1</li>
<li>localhost</li>
</ul>
<h2>配置可攜程式環境</h2>
<p>首先取得 Windows 10 64 位元環境下的可攜程式環境</p>
<p>(下載  <a href="https://drive.google.com/open?id=1_TQBw1PM7jxrmtsBjvLKbjJWfGs8Ug79" target="_blank">2019_cdb_w5.7z</a> or <a href="https://drive.google.com/file/d/12IOfTpupXL0czFM_ZeHt-6sxfXwZK6ai/view?usp=sharing" target="_blank">2019_cdb_w13.7z</a>) 將其解壓後</p>
<p>放入 USB3.0 規格以上的隨身碟或隨身硬碟<br/><br/>以滑鼠點擊 start.bat 即可開啟可攜隨身系統</p>
<p>以 stop.bat 關閉可攜隨身系統  隨身碟必須在關閉所有應用程式執行下</p>
<p>才可拔出否則有機率造成隨身碟或檔案損壞</p>
<p><strong>了解基本的 DOS (Disk Operating System) 指令</strong></p>
<ul style="list-style-type: square;">
<li>切換目錄:cd</li>
<li><span>列出目前所在目錄的內容:dir</span></li>
<li><span>可以建立目錄:mkdir</span></li>
<li><span>清除目前的命令列顯示的內容:cls</span></li>
</ul>
<h2>導入CMSimfly</h2>
<p>將自己的倉儲clone到近端後  會發現裡面有.git的資料夾以及README.md</p>
<p>.git資料夾裡的資料存放著關於倉儲的提交紀錄所以盡量不要去動</p>
<p>而README.md則是github上的顯示內容</p>
<p><img alt="" height="299" src="/images/README.md內容.png" width="444"/></p>
<p>將CMSimfly(<a href="https://github.com/chiamingyen/cmsimfly">https://github.com/chiamingyen/cmsimfly</a>)</p>
<p>clone下來後將.git及README.md以外的東西全部複製到自己的倉儲下</p>
<p>cd切換目錄到自己的倉儲後輸入python wsgi.py即可開啟動態網頁</p>
<p>在瀏覽器輸入<a>https://127.0.0.1:9443</a>就可以進入網頁開始編輯</p>
<h1>校園授權軟體</h1>
<h2>TWAREN SSL-VPN服務</h2>
<p>校園授權軟體必須是校內IP才能下載、及授權</p>
<p>所以必須使用學校提供的VPN服務</p>
<p><a href="https://nfucc.nfu.edu.tw/zh/download/download-network/ssl-vpn">TWAREN SSL-VPN</a></p>
<p>點擊裡面提供的連結下載<strong>Juniper Networks Connect</strong></p>
<p>下載符合自己系統的檔案</p>
<p><strong><img caption="false" height="184" src="/images/chrome_XvJRp8KTRe.png" width="800"/></strong></p>
<p>點兩下安裝 之後打開<strong>Network Connect</strong></p>
<p><img alt="" height="109" src="/images/chrome_3Y9n4Ybj4U.png" width="188"/></p>
<p><img alt="" height="400" src="/images/dsNetworkConnect_jK6IJtrPNU.png" width="440"/></p>
<p><span>於登入頁面輸入<a href="https://sslvpn.nfu.edu.tw/nfu">https://sslvpn9.twaren.net/nfu</a>後按執行會跑出</span></p>
<p><span><img alt="" height="400" src="/images/dsNetworkConnect_2HPE1eyBRX.png" width="440"/></span></p>
<p><span>這邊輸入校務行政帳密就可以登入</span></p>
<p><span><img alt="" height="400" src="/images/dwm_EM3lGhU56x.png" width="440"/></span></p>
<p><span>這邊按是或永遠</span></p>
<p><span><img alt="" height="151" src="/images/U4v7OcS7UD.png" width="174"/></span></p>
<p><span>這樣就代表連線成功</span></p>
<h2>How to Download</h2>
<p>到學校的電算中心網站<a href="https://nfucc.nfu.edu.tw/zh/">https://nfucc.nfu.edu.tw/zh/</a></p>
<p>滾動到下面找到校園授權軟體下載專區</p>
<p><img alt="" height="400" src="/images/chrome_F0O9ukx2aO.png" width="562"/></p>
<p>點進去後會要你輸入校務行政帳密</p>
<p><img alt="" height="400" src="/images/chrome_u3BmdUQoVt.png" width="552"/></p>
<p>登入後會出現這樣的畫面  選擇自己需要的軟體下載即可</p>
<p><img alt="" height="400" src="/images/chrome_Td2sWnBcqI.png" width="383"/></p>
<p>裡面也都附有軟體的授權教學</p>
<h1>如何安裝作業系統</h1>
<h2>How to Install Ubuntu</h2>
<p>先去官網下載Ubuntu的安裝映像檔<a href="https://www.ubuntu.com">https://www.ubuntu.com</a></p>
<p>這邊以Ubuntu Server 18.04 LTS作為示範</p>
<p>點開Download的下拉選單後下載Ubuntu Server</p>
<p>Desktop是有GUI介面的  Server是純命令列介面</p>
<p><img alt="" height="400" src="/images/chrome_Lv8BWHe3mT.png" width="610"/></p>
<p>下載完成後打開Oracle VM VirtualBox點擊新增</p>
<p><img caption="false" height="500" src="/images/VirtualBox_BsaQKPr9ab.png" width="691"/></p>
<p>名稱自行命名    機器資料夾如果沒有要放其他地方就預設就好</p>
<p>類型選Linux    版本選Ubuntu (64-bit) </p>
<p><span>記憶體大小越大越好以不影響主電腦運行為優先</span></p>
<p>如果沒有64位元可能是電腦沒有開啟VT或是CPU不支援VT</p>
<p>硬碟就選立即建立虛擬硬碟  之後按建立</p>
<p><img caption="false" height="500" src="/images/VirtualBox_ibW96eYn7C.png" width="565"/></p>
<p>檔案位置沒有特殊需求一樣預設就好</p>
<p>檔案大小我們習慣設定500GB  然後選擇動態配置這樣用多少檔案就多大</p>
<p>固定的話你分配多少硬碟就會預先分配多少這樣很佔空間</p>
<p><img caption="false" height="500" src="/images/VirtualBox_cy5VWuwcei.png" width="549"/></p>
<p>硬碟檔類型選擇VMDK方便以後可以將虛擬轉至實體使用  按下建立後</p>
<p>會在左方多出一個虛擬機  這時可以先進行設定  也可以先安裝完後再設定</p>
<p>這邊先不設定直接點擊啟動</p>
<p><img caption="false" height="500" src="/images/VirtualBox_vJEwLTi4G9.png" width="691"/></p>
<p>然後它會跳出一個視窗讓你選擇安裝系統的映像檔  選完之後按啟動</p>
<p><img caption="false" height="500" src="/images/VirtualBoxVM_7COp8GqcpO.png" width="580"/></p>
<p>這邊選擇系統語言  選擇English</p>
<p><img caption="false" height="500" src="/images/VirtualBox_dc2OohT6eQ.png" width="595"/></p>
<p>下一步  這邊是鍵盤的語言設置一樣都是English</p>
<p><img caption="false" height="500" src="/images/VirtualBox_32HFBsZ7O0.png" width="595"/></p>
<p>下一步  這邊選第一個安裝  其他兩個是多主機雲端協同用的</p>
<p><img caption="false" height="500" src="/images/VirtualBox_b01VMpm1k8.png" width="595"/></p>
<p>下一步  這邊是網路設定  目前是以NAT上網  安裝完後再設定  所以直接下一步</p>
<p><img caption="false" height="500" src="/images/VirtualBox_XOolHUR1Dy.png" width="595"/></p>
<p>下一步  這邊是Proxy的設定  這邊是用這個http://140.130.17.4:3128 </p>
<p>若不使用可直接留白</p>
<p><img caption="false" height="500" src="/images/VirtualBox_O7dtc4msVH.png" width="595"/></p>
<p>下一步  這邊是Ubuntu下載鏡像檔的網址  保持預設就好</p>
<p>  <img caption="false" height="500" src="/images/VirtualBox_lrMsqv3NqB.png" width="595"/></p>
<p>下一步  這邊是分割硬碟然後格式化這邊選第一個整顆硬碟格式化</p>
<p><img alt="" height="500" src="/images/VirtualBox_cMhS9jnsot.png" width="595"/></p>
<p>再來選擇要安裝的硬碟</p>
<p><img alt="" height="500" src="/images/VirtualBox_P0TgdOQnP7.png" width="595"/></p>
<p>這邊確認OK就下一步</p>
<p><img alt="" height="500" src="/images/VirtualBox_yHutY5KYuS.png" width="595"/></p>
<p>它會問你確認要格式化嗎  選Continue</p>
<p><img alt="" height="500" src="/images/VirtualBox_ZncsslWH0v.png" width="595"/></p>
<p>下一步  這邊是設定名字以及登入的帳號密碼</p>
<p>第一第二項是名字  第三是帳號  第四是密碼  第五是確認密碼</p>
<p><img caption="false" height="500" src="/images/VirtualBox_NgWgGlcKKb.png" width="595"/></p>
<p>下一步  是否要安裝OpenSSH  這邊選擇要</p>
<p><img alt="" height="500" src="/images/VirtualBox_THVMOgSq4c.png" width="595"/></p>
<p>下一步  這邊<span>選擇想要安裝的伺服器組合  如果不要直接下一步就好  就會開始安裝了</span></p>
<p><img alt="" height="500" src="/images/VirtualBox_9tFmDQwwKK.png" width="595"/></p>
<p>有一條槓槓再轉就是正在安裝</p>
<p><img alt="" height="500" src="/images/VirtualBox_xDGpCau4Zh.png" width="595"/></p>
<p>安裝完後選Reboot重開就安裝完成了</p>
<p>剛開機會需要輸入帳號密碼</p>
<p>使用sudo都需要輸入密碼</p>
<p>關機使用 sudo shutdown -h now  關機並關電源</p>
<p>使用 sudo halt  是關機但不關電源</p>
<h2>How to Install windows10</h2>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="506" src="https://www.youtube.com/embed/z0Upl633bWY" width="900"></iframe></p>
<p>這邊是在虛擬機進行安裝  在實體電腦上大同小異</p>
<p>開機時按F8使用光碟或USB開機進入安裝  或是按del進BIOS調整開機順序也可以</p>
<p>安裝完之後要進行授權</p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="506" src="https://www.youtube.com/embed/4NopMakXd4o" width="900"></iframe></p>
<h1>FileZilla</h1>
<p>這是一款免費的FTP軟體  官網(<a href="https://filezilla-project.org">https://filezilla-project.org</a>)</p>
<p>進入官網後點擊這個進入下載頁面</p>
<p><img alt="" height="186" src="/images/filezilla2.png" width="401"/></p>
<p>進來後會看到這個  請點擊最下面的  Show additional download options</p>
<p><img alt="" height="400" src="/images/filezilla1.png" width="592"/></p>
<p>進去後會看到各系統的載點  我們下載windows(64bit)的zip可攜版本</p>
<p><img alt="" height="172" src="/images/filezilla.png" width="621"/></p>
<p>下載完成後直接解壓縮到隨身碟就可以使用了</p>
<p>開啟後長這樣</p>
<p><img alt="" height="400" src="/images/filezilla_1.png" width="503"/></p>
<p>點擊左上角的檔案打開站台管理員</p>
<p><img alt="" height="289" src="/images/filezilla_2.png" width="381"/></p>
<p>之後點擊新增站台  名稱自訂  協定使用SFTP  主機輸入Ubuntu的IP  連接埠留白即可</p>
<p>登入形式選詢問密碼  使用者就是Ubuntu安裝時設定的name  設定完後就可以確認保存</p>
<p><img alt="" height="500" src="/images/filezilla_3.png" width="555"/></p>
<h1>Ubuntu環境配置</h1>
<h2>環境準備</h2>
<p>可以按下面的步驟自行配置或是下載已經配置好的虛擬機<a href="https://drive.google.com/file/d/1l7DLMa6JSOE7m3AwPfWjazweEjymK9sP/view">vmdk壓縮檔</a></p>
<ol>
<li><span>安裝最新版的 Virtualbox</span></li>
<li><span>建立 Ubuntu 18.04 虛擬主機</span></li>
<li><span>以網路卡橋接啟動 Ubuntu 伺服器</span></li>
<li>使用以下指令來安裝所需要的軟體</li>
</ol>
<ul style="list-style-type: square;">
<li><span>sudo apt install nginx</span></li>
<li><span>sudo apt install uwsgi</span></li>
<li><span>sudo apt install python3-pip</span></li>
<li><span>sudo apt install uwsgi uwsgi-plugin-python3</span></li>
<li><span>sudo apt install ssh</span></li>
<li><span>sudo apt install git</span></li>
<li><span>sudo pip3 install flask bs4 lxml</span></li>
<li><span>sudo pip3 install uwsgi</span><span></span></li>
</ul>
<p><strong>Fossil</strong>由於這樣安裝的版本會較舊  所以另有分頁說明安裝方法</p>
<p>接下來需要修改一些設定</p>
<p><strong>Ubuntu 18.04 /etc/netplan/50-cloud-init.yaml</strong></p>
<p>這邊的網路設定僅供參考  須依所在的網路環境進行調整</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># This file is generated from information provided by
# the datasource.  Changes to it will not persist across an instance.
# To disable cloud-init's network configuration capabilities, write a file
# /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:
# network: {config: disabled}
network:
    ethernets:
        enp0s3:
            dhcp4: true 
            dhcp6: false 
            #addresses: 
            #- 192.168.1.13/24
            #- 2001:288:6004::1/64
            gateway4: 192.168.1.1
            #gateway6: 2001:288:6004::254
            nameservers:
                addresses:
                - 168.95.1.1
                - 8.8.8.8
                - 140.130.1.2
                - 2001:288:6004:1::2
                - 2001:b000:168::1
    version: 2
</pre>
<p><strong>/etc/nginx/sites-available/default</strong></p>
<p><strong></strong>以下路徑的部分請依實際狀況做更改  這是為了讓nginx知道要伺服哪個路徑</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">server {
    listen 80;
    listen [::]:80;
    root /home/server-50733143/repository/2019wcmj;
    index index.html;

    location /static {
        alias /home/server-50733143/repository/2019wcmj/static/;
    }

    location /downloads {
        alias /home/server-50733143/repository/2019wcmj/downloads/;
    }

    location /images {
        alias /home/server-50733143/repository/2019wcmj/images/;
    }

    location / {
            try_files $uri $uri/ =404;
    } 
    
    location /blog {
        alias /home/server-50733143/repository/2019wcmj/blog/;
    }

    location /reveal {
        alias /home/server-50733143/repository/2019wcmj/reveal/;
    }
}

server {
    listen 443 ssl;
    #listen [::]:443 ssl ipv6only=on;
 
    location /static {
        alias /home/server-50733143/repository/2019wcmj/static/;
    }
 
    location / {
        include uwsgi_params;
        uwsgi_pass  127.0.0.1:8080;
    }
 
    #server_name ipv4_ip; 
    #ssl on;
    ssl_certificate /etc/stunnel/localhost.crt;
    ssl_certificate_key /etc/stunnel/localhost.key;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_prefer_server_ciphers on;
    try_files $uri $uri/ =404;
}</pre>
<p>再來請創建一個資料夾及ini檔  一起放在<strong>/home/使用者名稱/</strong></p>
<p>這個目錄下即可</p>
<p><img alt="" height="162" src="/images/uwsgi.ini.png" width="275"/></p>
<p><strong>uwsgi.ini</strong></p>
<p><strong></strong>路徑與ID的部分一樣請依實際狀況做更改</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">[uwsgi]
socket = 127.0.0.1:8080
uid = server-50733143
gid = server-50733143
plugins-dir = /usr/lib/uwsgi/plugins/
plugin = python3
master = true
logto = /var/log/uwsgi/emperor.log
logfile-chown = server-50733143:server-50733143
processes = 4
threads = 2
chdir = /home/server-50733143/repository/2019wcmj
wsgi-file = /home/server-50733143/repository/2019wcmj/wsgi.py
</pre>
<p>再來創建一個<strong>cmsimfly.service</strong>檔  這個則放在<span><strong>/etc/systemd/system </strong> 這個目錄下</span></p>
<p><strong>cmsimfly.service</strong></p>
<p>路徑與ID一樣請依情況更改  這個檔案是要讓CMSimfly能隨開機啟動</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">[Unit]
Description=uWSGI to serve CMSimfly
After=network.target
 
[Service]
User=server-50733143
Group=server-50733143
WorkingDirectory=/home/server-50733143/uwsgi_ini
ExecStart=/usr/local/bin/uwsgi --emperor /home/server-50733143/uwsgi_ini
 
[Install]
WantedBy=multi-user.target</pre>
<p>CMSimfly與自己的倉儲可以在Ubuntu中直接下指令clone</p>
<p>或是使用FileZilla送進去也可以  只是礙於權限問題只能送到<strong>/home/使用者名稱/</strong></p>
<p>這個目錄下  要送到其他地方只能先送到這個目錄再來使用<strong>sudo cp 檔案名稱 路徑</strong></p>
<p>才能將檔案複製過去  又或是直接在Ubuntu下使用vi  直接編輯但這樣速度太慢</p>
<p>建議在windows下編輯完後使用FileZilla送入home再來使用cp覆蓋</p>
<p>還有新版的CMSimfly  <strong>init.py</strong>中的設定為<strong> </strong><span><strong>uwsgi = True</strong> 這是for Ubuntu</span></p>
<p>若要在windows環境下使用須改為False</p>
<p>檔案都配置好後就可以下指令啟用了</p>
<p><strong>/etc/netplan/50-cloud-init.yaml  </strong>配置好後使用  sudo netplan try</p>
<p>若沒有提示錯誤就可以按Enter套用</p>
<p><span>sudo /usr/bin/uwsgi --emperor /home/kmol2019/uwsgi_ini</span></p>
<p><span>這是用來啟動uwsgi  啟動剛剛創建的<strong>uwsgi.ini</strong></span></p>
<p>接著將 cmsimfly 服務設為隨系統開機啟動:</p>
<p><span>sudo systemctl enable cmsimfly</span></p>
<p><span>取消的話則改成disable即可取消</span></p>
<p><span>手動啟動 cmsimfly.service 服務</span></p>
<p><span>sudo systemctl start cmsimfly<br/></span></p>
<p><span>停止則改為stop即可</span></p>
<h2>Fossil SCM</h2>
<p><span>Fossil是一個分散式版本控制系統  類似Git</span></p>
<p><span>請到他們官網下載windows及linux版本(<a href="https://fossil-scm.org">https://fossil-scm.org</a>)</span></p>
<p>到Download Page下載最新的版本</p>
<p><img alt="" height="266" src="/images/Fossil SCM下載.png" width="589"/></p>
<p>將windows版解壓縮到Y:下  這樣當Ubuntu配置好Fossil後  才有辦法使用</p>
<p>Ubuntu使用sudo apt install fossil  安裝完後的版本為2.5</p>
<p>還要安裝<span>sudo apt install stunnel  這是為了在https模式下使用Fossil SCM伺服器</span></p>
<p>所以我們將Linux版解壓縮   使用FileZilla送到Ubuntu的<span>/home/kmol2019/</span></p>
<p><span>再使用sudo cp fossil /usr/bin/  用新版的fossil蓋掉舊版的  </span></p>
<p><span>複製後  再用 fossil version 查驗版本  確認為最新的 2.8 版</span></p>
<p><span>再來修改 /etc/environment 加入HTTPS=on</span></p>
<p><span>修改 /etc/default/stunnel4 將 ENABLED=0 改為 1</span></p>
<p><span>再來創建一個<strong>stunnel.conf</strong></span></p>
<p><strong></strong>路徑依照實際狀況修改</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">[https]
accept = server-50733143:5443
# 只先啟用 ipv4
#accept = :::443
cert = /etc/stunnel/localhost.crt
key = /etc/stunnel/localhost.key
exec = /usr/bin/fossil
execargs = /usr/bin/fossil http /home/server-50733143/repository/2019wcmj/ --https --nojail --notfound 2019wcmj</pre>
<p><span>表示利用 stunnel 執行 fossil 指令 並且透過 http 協定啟動</span></p>
<p><span>位於/home/server-50733143/repository/2019wcmj/目錄下的倉儲壓縮檔案</span></p>
<p><span>其中 --nojail 目的在 drop the root privilege but do not enter the chroot jail</span></p>
<p><span>其後的 --notfound 表示若沒有特別在 URL 中列出所要擷取的 .fossil 檔案</span></p>
<p><span> (指位於 /home/server-50733143/repository/2019wcmj/ 目錄下)</span></p>
<p><span>則採用 2019wcmj.fossil</span></p>
<p><span>假如此時 /etc/stunnel 目錄下尚無 localhost.crt 與 localhost.key 可以利用下列指令建立</span></p>
<p><span>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt</span></p>
<p><span>配置好後使用sudo /etc/init.d/stunnel4 restart 將stunnel4重啟</span></p>
<p><strong>使用方法如下</strong></p>
<p><span>創建一個資料夾並切換目錄到資料夾  mkdir 資料夾名稱  cd資料夾名稱</span></p>
<p><span>初始化一個倉儲fossil init 名稱.fossil  名稱自行命名</span></p>
<p><span>接著會跳出一小段密碼請記住它  登入fossil時會用到</span></p>
<p><span>然後到windows下的可攜系統輸入</span></p>
<p>fossil clone <a href="https://IP:5443/資">https://IP:5443/資</a>料夾名稱 檔案名稱</p>
<p>我的範例  fossil clone <a href="https://192.168.1.107:5443">https://192.168.1.107:5443</a>/server-50733143 server-50733143.fossil</p>
<p>clone回來後使用fossil open 路徑/檔案名稱</p>
<p>Ubuntu那邊一樣要open</p>
<p>範例fossil open server-50733143/server-50733143.fossil</p>
<p>之後就可以在資料夾中加入檔案要提交的時候跟Git差不多</p>
<p>先fossil addremove  再fossil commit -m "提交訊息"</p>
<p>最後fossil push <a href="https://使用者名">https://使用者名</a>@IP:5443</p>
<p>過程會需要輸入密碼就輸入網站登入的密碼即可</p>
<p>這樣就完成提交了</p>
<p>提交完成後  Timeline 跟 Files都會出現新的提交</p>
<p><img caption="false" src="/images/fossil提交1.png" width="600"/></p>
<p></p>
<p><img alt="" height="429" src="/images/fossil提交.png" width="600"/></p>
<p><span></span>若要讓Ubuntu的資料夾更新輸入</p>
<p>fossil update即可更新類似Git的git pull</p>
<p><span></span></p>
<h1>Git</h1>
<h2>建立GitHub倉儲</h2>
<p>建立倉儲有兩種方法, 以下介紹的是其中一種比較簡易,</p>
<p>另一種需要自己下指令來初始化倉儲較為麻煩.</p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="506" src="https://www.youtube.com/embed/t2VOjWQrseU" width="900"></iframe></p>
<h2>啟用GitHub Pages</h2>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="506" src="https://www.youtube.com/embed/yfNK-AXE6nE" width="900"></iframe></p>
<p>啟用後GitHub Pages預設會伺服根目錄下的index.html</p>
<h2>建立 OpenSSH 格式的 Private 與 Public Keys</h2>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="506" src="https://www.youtube.com/embed/4U3ns3OZoew" width="900"></iframe></p>
<p>建立金鑰命令:ssh-keygen -t rsa -b 4096 -C "註解"</p>
<p>-keygen是生成金鑰</p>
<p>-t是演算法類別rsa是其中一種</p>
<p>-b是要生成多大的金鑰</p>
<p>-C是加入註解</p>
<h2>使用 SSH 執行 Git clone 與 push</h2>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="506" src="https://www.youtube.com/embed/yKMCb-p3OhM" width="900"></iframe></p>
<h2>倉儲改版</h2>
<p><span>建立 Git 倉儲後, 並 clone 至近端工作後, 對遠端倉儲改版.</span></p>
<p><span>可攜系統中已經內建 git, 可以在啟動 start.bat 後, 透過 path 的路徑設定, </span></p>
<p><span>可以直接執行 git 指令.</span></p>
<p><span>使用者改版後, 可以直接透過 git add, commit 與 push 對遠端倉儲改版.</span></p>
<p><span><strong>Git基本指令</strong></span></p>
<ul style="list-style-type: square;">
<li>git add :把已修改的檔案增加暫存區, 可以加單一檔案也可以使用 . 增加所有檔案.</li>
<li>git commit -m "提交訊息" :m=message, 用來將暫存區的檔案加到.git目錄下.</li>
<li>git push :將提交的內容推到遠端倉儲加上 -f 會強制push覆蓋掉遠端資料,請小心使用.</li>
<li>git pull :將遠端較新的資料拉回近端合併, 當push的時候有提示遠端的版本更新時, 請先拉後推, 不要直接使用-f.</li>
</ul>
<h2>將 portablegit 中的 helper = manager 的設定移除</h2>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="506" src="https://www.youtube.com/embed/eXOi179ngAU" width="900"></iframe></p>
<p>這麼做是為了不要讓git在電腦中儲存你的帳號資料</p>
<p>如果是私人電腦可以不做  在公共電腦的話還是做一下比較好</p>
<h2>介紹圖形化git工具</h2>
<p>在可攜系統中配置有ungit可以使用  使用方法如下</p>
<p>切換目錄到倉儲下後輸入kungit</p>
<p>chrome會跳出一個新的分頁</p>
<p>就可以不用手動key命令</p>
<p><img alt="" height="400" src="/images/ungit.png" width="746"/></p>
<p>還有GitExtensions可以使用</p>
<p>這是他們的github(<a href="https://github.com/gitextensions/gitextensions">https://github.com/gitextensions/gitextensions</a>)</p>
<p>這是官方載點(<a href="https://github.com/gitextensions/gitextensions/releases">https://github.com/gitextensions/gitextensions/releases</a>)</p>
<p>官方有提供安裝版及可攜版</p>
<p>這是KMOL製作的可攜版(<a href="https://drive.google.com/open?id=1_pH2cKAGeH3OGwZUFPJwsi7WcX3ELvph">https://drive.google.com/open?id=1_pH2cKAGeH3OGwZUFPJwsi7WcX3ELvph</a>)</p>
<p>以上介紹兩款都是可攜的</p>
<p>還有幾款也是蠻多人用的像是</p>
<ul style="list-style-type: square;">
<li><a href="https://www.sourcetreeapp.com/">Sourcetree</a></li>
<li><a href="https://desktop.github.com/">GitHub Desktop</a></li>
</ul>
<p>當然還有更多  這邊就不多作介紹了</p>
<h1>儲存設備格式化</h1>
<p>大家應該都有發現要將單檔4G以上的檔案放入隨身碟都會出現</p>
<p><strong>「檔案太大無法放置在目的地檔案系統」</strong></p>
<p><strong></strong>這是受限於FAT32這個檔案系統  <span>最大單一檔案大小為</span><span lang="EN-US"> 2^32 </span><span>位元組</span><span lang="EN-US">= 4GB </span></p>
<p>這時我們可以將隨身碟格式化成exFAT</p>
<p>將你的隨身碟插入電腦  並將資料都先取出  因為格式化會清空資料</p>
<p>對隨身碟右鍵點擊格式化</p>
<p><img alt="" height="272" src="/images/隨身碟格式化1.png" width="346"/></p>
<p>之後檔案系統選擇exFAT  配置單位就不要動  快速格式化就看自己要不要用</p>
<p><img caption="false" height="500" src="/images/隨身碟格式化2.png" width="286"/></p>
<p>不要動或是選預設配置大小也可以</p>
<p><img alt="" height="144" src="/images/隨身碟格式化3.png" width="355"/></p>
<p>都選好之後就按開始即可  等它格式化完就可以把資料移回去了</p>
<p><strong>為什麼不使用NTFS呢?</strong></p>
<p>因為NTFS分區是採用「日誌式」的檔案系統  需要記錄詳細的讀寫操作</p>
<p>每次的讀寫操作都需要紀錄所以會頻繁的讀寫  比較傷快閃記憶體磁碟晶片</p>
<p>並不適合隨身碟使用</p>
<p>但如果是外接硬碟就可以使用NTFS但NTFS為windows的檔案系統</p>
<p>在Mac系統或其他系統無法使用在相容性上較差</p>
<p><strong>exFAT</strong></p>
<p>跨系統相容性佳  如Windows、Mac OS X與Linux</p>
<p>沒有單檔4G的限制</p>
<p>讀取大容量檔案時獲得更理想的速度</p>
<h1>產生亂數1~51</h1>
<p></p>
<p><button onclick="myFunction()">click</button></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;p&gt;&lt;button onclick="myFunction()"&gt;click&lt;/button&gt;&lt;/p&gt;
&lt;p id="demo"&gt;&lt;/p&gt;
&lt;script&gt;
function myFunction() {
  document.getElementById("demo").innerHTML = Math.floor(Math.random()*50+1);
}
&lt;/script&gt;</pre>
<p id="demo"></p>
<h4>
<script>
function myFunction() {
  document.getElementById("demo").innerHTML = Math.floor(Math.random()*50+1);
  //alert("123");
}
</script>
</h4>
<h1>網管期中自評影片</h1>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="693" src="https://www.youtube.com/embed/25xyi97_fTQ" width="1280"></iframe></p>
<h1>網管期末自評影片</h1>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="506" src="https://www.youtube.com/embed/EzqNabY5gko" width="900"></iframe></p><h1>ROC flag</h1>
<p>如果是使用舊版CMSimfly需先修改flaskapp.py才可show圖</p>
<p>使用最新版的CMSimfly就沒有這個問題</p>
<p>savePage()的修改</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def savePage():
    """save all pages function"""
    page_content = request.form['page_content']
    # when element_format : "html", need to remove the annoying comment to prevent brython exec
    page_content = [w.replace('// &lt;![CDATA[', '') for w in page_content]
    page_content = [w.replace('// ]]&gt;', '') for w in page_content]
    # check if administrator
......</pre>
<p>def ssavePage()的修改</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def ssavePage():
    """seperate save page function"""
    page_content = request.form['page_content']
    # when element_format : "html", need to remove the annoying comment to prevent brython exec
    page_content = page_content.replace('// &lt;![CDATA[', '')
    page_content = page_content.replace('// ]]&gt;', '')
    page_order = request.form['page_order']
    if not isAdmin():
......</pre>
<p>修改後可show出圖但會有Edit All無法使用的狀況save會出現Error</p>
<p>過渡方案可以使用其他編輯器對..\2019wcmj\config\content.html進行編輯</p>
<p>效果是一樣的只是需要了解一點html的語法</p>
<p>canvas繪圖程式碼</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 導入 Brython 標準程式庫 --&gt;
&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;p&gt;&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;
&lt;p&gt;&lt;canvas height="400" id="plotarea" width="600"&gt;&lt;/canvas&gt;&lt;/p&gt;
&lt;script type="text/python"&gt;
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
&lt;/script&gt;</pre>
<!-- 導入 Brython 標準程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<p></p>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
</script>
<p><canvas height="400" id="plotarea" width="600"></canvas></p>
<script type="text/python">
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script>
<p></p>
<p><canvas height="400" id="plotarea2" width="600"></canvas></p>
<script type="text/python">
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["plotarea2"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/2
circle_y = flag_h/2
# 左上
ctx.fillStyle='rgb(0, 0, 255)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 右上
ctx.fillStyle='rgb(0, 255, 255)'
ctx.fillRect(300,0,flag_w/2,flag_h/2)
# 左下
ctx.fillStyle='rgb(124, 252, 0)'
ctx.fillRect(0,200,flag_w/2,flag_h/2)
# 右下
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(300,200,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script>